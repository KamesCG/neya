{
  "contractName": "MultiSend",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "transactions",
          "type": "bytes"
        }
      ],
      "name": "multiSend",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506101ac806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d80ff0a14610030575b600080fd5b6100e96004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100eb565b005b805160205b81811015610172578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610135576001811461014557610150565b6000808585888a5af19150610150565b6000808585895af491505b50600081141561015f57600080fd5b82605501870196505050505050506100f0565b50505056fea265627a7a723158205bb4635a16e7d00c5190ab86d82374360589279856d8eff26e258ee039f1d47764736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d80ff0a14610030575b600080fd5b6100e96004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100eb565b005b805160205b81811015610172578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610135576001811461014557610150565b6000808585888a5af19150610150565b6000808585895af491505b50600081141561015f57600080fd5b82605501870196505050505050506100f0565b50505056fea265627a7a723158205bb4635a16e7d00c5190ab86d82374360589279856d8eff26e258ee039f1d47764736f6c634300050b0032",
  "sourceMap": "312:2438:21:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;312:2438:21;;;;;;;",
  "deployedSourceMap": "312:2438:21:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;312:2438:21;;;;;;;;;;;;;;;;;;;933:1815;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;933:1815:21;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;933:1815:21;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;933:1815:21;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;933:1815:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;933:1815:21;;;;;;;;;;;;;;;:::i;:::-;;;1115:12;1109:19;1150:4;1167:1565;1181:6;1178:1;1175:13;1167:1565;;;1502:1;1488:12;1484:20;1478:27;1472:4;1468:38;1776:4;1773:1;1769:12;1755;1751:31;1745:38;1739:4;1735:49;1938:4;1935:1;1931:12;1917;1913:31;1907:38;2121:4;2118:1;2114:12;2100;2096:31;2090:38;2315:4;2312:1;2308:12;2294;2290:31;2353:1;2378:9;2409:1;2404:66;;;;2492:1;2487:67;;;;2371:183;;2404:66;2466:1;2463;2451:10;2445:4;2438:5;2434:2;2429:3;2424:44;2413:55;;2404:66;;2487:67;2550:1;2547;2535:10;2529:4;2525:2;2520:3;2507:45;2496:56;;2371:183;;2586:1;2577:7;2574:14;2571:2;;;2601:1;2598;2591:12;2571:2;2706:10;2700:4;2696:21;2693:1;2689:29;2684:34;;1193:1539;;;;;;1167:1565;;;1081:1661;;;:::o",
  "source": "pragma solidity >=0.5.0 <0.7.0;\n\n\n/// @title Multi Send - Allows to batch multiple transactions into one.\n/// @author Nick Dodson - <nick.dodson@consensys.net>\n/// @author Gonçalo Sá - <goncalo.sa@consensys.net>\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract MultiSend {\n\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    function multiSend(bytes memory transactions)\n        public\n    {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for { } lt(i, length) { } {\n                // First byte of the data is the operation.\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\n                // This will also zero out unused data.\n                let operation := shr(0xf8, mload(add(transactions, i)))\n                // We offset the load address by 1 byte (operation byte)\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\n                let value := mload(add(transactions, add(i, 0x15)))\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\n                let dataLength := mload(add(transactions, add(i, 0x35)))\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\n                let data := add(transactions, add(i, 0x55))\n                let success := 0\n                switch operation\n                case 0 { success := call(gas, to, value, data, dataLength, 0, 0) }\n                case 1 { success := delegatecall(gas, to, data, dataLength, 0, 0) }\n                if eq(success, 0) { revert(0, 0) }\n                // Next entry starts at 85 byte + data length\n                i := add(i, add(0x55, dataLength))\n            }\n        }\n    }\n}\n",
  "sourcePath": "/Users/admin/Documents/GitHub/contracts/safe-contracts/contracts/libraries/MultiSend.sol",
  "ast": {
    "absolutePath": "/Users/admin/Documents/GitHub/contracts/safe-contracts/contracts/libraries/MultiSend.sol",
    "exportedSymbols": {
      "MultiSend": [
        2534
      ]
    },
    "id": 2535,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2526,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:21"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Multi Send - Allows to batch multiple transactions into one.\n @author Nick Dodson - <nick.dodson@consensys.net>\n @author Gonçalo Sá - <goncalo.sa@consensys.net>\n @author Stefan George - <stefan@gnosis.io>\n @author Richard Meissner - <richard@gnosis.io>",
        "fullyImplemented": true,
        "id": 2534,
        "linearizedBaseContracts": [
          2534
        ],
        "name": "MultiSend",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2532,
              "nodeType": "Block",
              "src": "998:1750:21",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1115:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1488:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1755:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1917:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2100:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2294:12:21",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 2531,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let length := mload(transactions)\n    let i := 0x20\n    for { } lt(i, length) { }\n    {\n        let operation := shr(0xf8, mload(add(transactions, i)))\n        let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n        let value := mload(add(transactions, add(i, 0x15)))\n        let dataLength := mload(add(transactions, add(i, 0x35)))\n        let data := add(transactions, add(i, 0x55))\n        let success := 0\n        switch operation\n        case 0 {\n            success := call(gas(), to, value, data, dataLength, 0, 0)\n        }\n        case 1 {\n            success := delegatecall(gas(), to, data, dataLength, 0, 0)\n        }\n        if eq(success, 0) { revert(0, 0) }\n        i := add(i, add(0x55, dataLength))\n    }\n}",
                  "src": "1072:1670:21"
                }
              ]
            },
            "documentation": "@dev Sends multiple transactions and reverts all if one fails.\n @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\n                     to as a address (=> 20 bytes),\n                     value as a uint256 (=> 32 bytes),\n                     data length as a uint256 (=> 32 bytes),\n                     data as bytes.\n                     see abi.encodePacked for more information on packed encoding",
            "id": 2533,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "multiSend",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2528,
                  "name": "transactions",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "952:25:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2527,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "952:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "951:27:21"
            },
            "returnParameters": {
              "id": 2530,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "998:0:21"
            },
            "scope": 2534,
            "src": "933:1815:21",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2535,
        "src": "312:2438:21"
      }
    ],
    "src": "0:2751:21"
  },
  "legacyAST": {
    "absolutePath": "/Users/admin/Documents/GitHub/contracts/safe-contracts/contracts/libraries/MultiSend.sol",
    "exportedSymbols": {
      "MultiSend": [
        2534
      ]
    },
    "id": 2535,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2526,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:21"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Multi Send - Allows to batch multiple transactions into one.\n @author Nick Dodson - <nick.dodson@consensys.net>\n @author Gonçalo Sá - <goncalo.sa@consensys.net>\n @author Stefan George - <stefan@gnosis.io>\n @author Richard Meissner - <richard@gnosis.io>",
        "fullyImplemented": true,
        "id": 2534,
        "linearizedBaseContracts": [
          2534
        ],
        "name": "MultiSend",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2532,
              "nodeType": "Block",
              "src": "998:1750:21",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1115:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1488:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1755:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1917:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2100:12:21",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 2528,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2294:12:21",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 2531,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let length := mload(transactions)\n    let i := 0x20\n    for { } lt(i, length) { }\n    {\n        let operation := shr(0xf8, mload(add(transactions, i)))\n        let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n        let value := mload(add(transactions, add(i, 0x15)))\n        let dataLength := mload(add(transactions, add(i, 0x35)))\n        let data := add(transactions, add(i, 0x55))\n        let success := 0\n        switch operation\n        case 0 {\n            success := call(gas(), to, value, data, dataLength, 0, 0)\n        }\n        case 1 {\n            success := delegatecall(gas(), to, data, dataLength, 0, 0)\n        }\n        if eq(success, 0) { revert(0, 0) }\n        i := add(i, add(0x55, dataLength))\n    }\n}",
                  "src": "1072:1670:21"
                }
              ]
            },
            "documentation": "@dev Sends multiple transactions and reverts all if one fails.\n @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\n                     to as a address (=> 20 bytes),\n                     value as a uint256 (=> 32 bytes),\n                     data length as a uint256 (=> 32 bytes),\n                     data as bytes.\n                     see abi.encodePacked for more information on packed encoding",
            "id": 2533,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "multiSend",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2528,
                  "name": "transactions",
                  "nodeType": "VariableDeclaration",
                  "scope": 2533,
                  "src": "952:25:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2527,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "952:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "951:27:21"
            },
            "returnParameters": {
              "id": 2530,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "998:0:21"
            },
            "scope": 2534,
            "src": "933:1815:21",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2535,
        "src": "312:2438:21"
      }
    ],
    "src": "0:2751:21"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.11+commit.c082d0b4.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.3",
  "updatedAt": "2019-11-10T01:32:19.356Z"
}